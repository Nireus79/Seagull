classification_report

Precision — What percent of your predictions were correct?

Precision is the ability of a classifier not to label an instance positive that is actually negative. For each class,
 it is defined as the ratio of true positives to the sum of a true positive and false positive.

Precision:- Accuracy of positive predictions.

Precision = TP/(TP + FP)

Recall — What percent of the positive cases did you catch?

Recall is the ability of a classifier to find all positive instances. For each class it is defined as the ratio of
 true positives to the sum of true positives and false negatives.

Recall:- Fraction of positives that were correctly identified.

Recall = TP/(TP+FN)

F1 score — What percent of positive predictions were correct?

The F1 score is a weighted harmonic mean of precision and recall such that
 the best score is 1.0 and the worst is 0.0. F1 scores are lower than accuracy measures as
  they embed precision and recall into their computation. As a rule of thumb, the weighted average of F1
   should be used to compare classifier models, not global accuracy.

F1 Score = 2*(Recall * Precision) / (Recall + Precision)

Support

Support is the number of actual occurrences of the class in the specified dataset. Imbalanced support
 in the training data may indicate structural weaknesses in the reported scores of the classifier and could indicate
  the need for stratified sampling or rebalancing. Support doesn’t change between models but instead diagnoses
   the evaluation process.


# btc30m = btc5m.resample('30min').apply(ohlc)
# btc4h = btc5m.resample('4H').apply(ohlc)
# btc1D = btc5m.resample('D').apply(ohlc)
#
# usdt30m = usdt5m.resample('30min').apply(ohlc)
# usdt4h = usdt5m.resample('4H').apply(ohlc)
# usdt1D = usdt5m.resample('D').apply(ohlc)

# eth30m['BTC_Close'] = btc30m['Close']
# eth30m['BTC_High'] = btc30m['High']
# eth30m['BTC_Low'] = btc30m['Low']
#
# eth30m['USDT_Close'] = usdt30m['Close']
# eth30m['USDT_High'] = usdt30m['High']
# eth30m['USDT_Low'] = usdt30m['Low']

# eth5m['30m_Close'] = eth30m['Close']
# eth5m['30m_Low'] = eth30m['Low']
# eth5m['30m_High'] = eth30m['High']
# eth5m['30m_Volume'] = eth30m['Volume']

# eth30m['BTC4H_Close'] = btc4h['Close']
# eth30m['BTC4H_Low'] = btc4h['Low']
# eth30m['BTC4H_High'] = btc4h['High']
#
# eth30m['USDT4H_Close'] = usdt4h['Close']
# eth30m['USDT4H_Low'] = usdt4h['Low']
# eth30m['USDT4H_High'] = usdt4h['High']

# eth30m['BTC1D_Close'] = btc1D['Close']
# eth30m['BTC1D_Volume'] = btc1D['Volume']
# eth30m['USDT1D_Close'] = usdt1D['Close']
# eth30m['USDT1D_Volume'] = usdt1D['Volume']

# data['30m_ema3'] = data['30m_Close'].rolling(3).mean()
# data['30m_ema6'] = data['30m_Close'].rolling(6).mean()
# data['30m_ema9'] = data['30m_Close'].rolling(9).mean()
# data['30m_ema13'] = data['30m_Close'].rolling(13).mean()
# data['30m_ema20'] = data['30m_Close'].rolling(20).mean()

# data['30m_vema3'] = data['30m_Volume'].rolling(3).mean()
# data['30m_vema6'] = data['30m_Volume'].rolling(6).mean()
# data['30m_vema9'] = data['30m_Volume'].rolling(9).mean()
# data['30m_vema13'] = data['30m_Volume'].rolling(13).mean()
# data['30m_vema20'] = data['30m_Volume'].rolling(20).mean()

# data['30m_adx'] = adx(data['30m_High'], data['30m_Low'], data['30m_Close'], window=14, fillna=False)
# data['30m_macd'] = macd_diff(data['30m_Close'], window_slow=26, window_fast=12, window_sign=9, fillna=False)
# data['30m_%K'] = stoch(data['30m_High'], data['30m_Low'], data['30m_Close'], window=14, smooth_window=3, fillna=False)
# data['30m_%D'] = data['30m_%K'].rolling(3).mean()
# data['30m_%DS'] = data['30m_%D'].rolling(3).mean()
# data['30m_rsi'] = rsi(data['30m_Close'], window=14, fillna=False)
# data['30m_atr'] = average_true_range(data['30m_High'], data['30m_Low'], data['30m_Close'], window=14, fillna=False)
# data['30m_diff'] = np.log(data['30m_Close']).diff()
# data['30m_cusum'] = data['30m_Close'].cumsum()
# data['30m_srl_corr'] = df_rolling_autocorr(returns(data['30m_Close']), window=window).rename('30m_srl_corr')
# data['30m_roc10'] = ROC(data['30m_Close'], 10)
# data['30m_roc20'] = ROC(data['30m_Close'], 20)
# data['30m_roc30'] = ROC(data['30m_Close'], 30)
# data['30m_mom10'] = MOM(data['30m_Close'], 10)
# data['30m_mom20'] = MOM(data['30m_Close'], 20)
# data['30m_mom30'] = MOM(data['30m_Close'], 30)
# data['Tr30m3'] = data.apply(lambda x: x['30m_Close'] - x['30m_ema3'], axis=1)
# data['Tr30m6'] = data.apply(lambda x: x['30m_Close'] - x['30m_ema6'], axis=1)
# data['Tr30m9'] = data.apply(lambda x: x['30m_Close'] - x['30m_ema9'], axis=1)
# data['Tr30m13'] = data.apply(lambda x: x['30m_Close'] - x['30m_ema13'], axis=1)
# data['Tr30m20'] = data.apply(lambda x: x['30m_Close'] - x['30m_ema20'], axis=1)


# BTC ----------------------------------------------------------------------------------------------------------
# data['BTC_ema3'] = data['BTC_Close'].rolling(3).mean()
# data['BTC_ema6'] = data['BTC_Close'].rolling(6).mean()
# data['BTC_ema9'] = data['BTC_Close'].rolling(9).mean()
# data['BTC_ema13'] = data['BTC_Close'].rolling(13).mean()
# data['BTC_ema20'] = data['BTC_Close'].rolling(20).mean()
#
# data['BTC_adx'] = adx(data['BTC_High'], data['BTC_Low'], data['BTC_Close'], window=14, fillna=False)
# data['BTC_macd'] = macd_diff(data['BTC_Close'], window_slow=26, window_fast=12, window_sign=9, fillna=False)
# data['BTC_%K'] = stoch(data['BTC_High'], data['BTC_Low'], data['BTC_Close'], window=14, smooth_window=3, fillna=False)
# data['BTC_%D'] = data['BTC_%K'].rolling(3).mean()
# data['BTC_%DS'] = data['BTC_%D'].rolling(3).mean()
# data['BTC_rsi'] = rsi(data['BTC_Close'], window=14, fillna=False)
# data['BTC_atr'] = average_true_range(data['BTC_High'], data['BTC_Low'], data['BTC_Close'], window=14, fillna=False)
# data['BTC_diff'] = np.log(data['BTC_Close']).diff()
# data['BTC_cusum'] = data['BTC_Close'].cumsum()
# data['BTC_srl_corr'] = df_rolling_autocorr(returns(data['BTC_Close']), window=window).rename('BTC_srl_corr')
# data['BTC_roc10'] = ROC(data['BTC_Close'], 10)
# data['BTC_roc20'] = ROC(data['BTC_Close'], 20)
# data['BTC_roc30'] = ROC(data['BTC_Close'], 30)
# data['BTC_mom10'] = MOM(data['BTC_Close'], 10)
# data['BTC_mom20'] = MOM(data['BTC_Close'], 20)
# data['BTC_mom30'] = MOM(data['BTC_Close'], 30)
# data['BTC_price'], data['BTC_ave'], data['BTC_upper'], data['BTC_lower'] =\
#     bbands(data['BTC_Close'], window=window, numsd=bb_stddev)
#
# data['BTCH4_ema3'] = data['BTC4H_Close'].rolling(3).mean()
# data['BTCH4_ema6'] = data['BTC4H_Close'].rolling(6).mean()
# data['BTC4H%K'] = stoch(data['BTC4H_High'], data['BTC4H_Low'], data['BTC4H_Close'],
#                        window=14, smooth_window=3, fillna=False)
# data['BTC4H%D'] = data['BTC4H%K'].rolling(3).mean()
# data['BTC4H%DS'] = data['BTC4H%D'].rolling(3).mean() data['BTC4Hmacd'] = macd_diff(data['BTC4H_Close'],
# window_slow=26, window_fast=12, window_sign=9, fillna=False) data['BTC4H_rsi'] = rsi(data['BTC4H_Close'],
# window=14, fillna=False) data['BTC4H_atr'] = average_true_range(data['BTC4H_High'], data['BTC4H_Low'],
# data['BTC4H_Close'], window=14, fillna=False)
#
# data['BTCDema3'] = data['BTC1D_Close'].rolling(3).mean()
# data['BTCDema6'] = data['BTC1D_Close'].rolling(6).mean()
# data['BTCDema9'] = data['BTC1D_Close'].rolling(9).mean()
# data['BTCDema13'] = data['BTC1D_Close'].rolling(13).mean()
# data['BTCDema20'] = data['BTC1D_Close'].rolling(20).mean()
#
# data['BTCTr3'] = data.apply(lambda x: x['BTC_Close'] - x['BTC_ema3'], axis=1)
# data['BTCTr9'] = data.apply(lambda x: x['BTC_Close'] - x['BTC_ema9'], axis=1)
# data['BTCTr20'] = data.apply(lambda x: x['BTC_Close'] - x['BTC_ema20'], axis=1)
# data['BTCTrD3'] = data.apply(lambda x: x['BTC_Close'] - x['BTCDema3'], axis=1)
# data['BTCTrD6'] = data.apply(lambda x: x['BTC_Close'] - x['BTCDema6'], axis=1)
# data['BTCTrD9'] = data.apply(lambda x: x['BTC_Close'] - x['BTCDema9'], axis=1)
# data['BTCTrD13'] = data.apply(lambda x: x['BTC_Close'] - x['BTCDema13'], axis=1)
#
# data['BTCStD4'] = data.apply(lambda x: x['BTC4H%K'] - x['BTC4H%D'], axis=1)
# data['BTCStD'] = data.apply(lambda x: x['BTC_%K'] - x['BTC_%D'], axis=1)
# data['BTCbb_sq'] = data.apply(lambda x: x['BTC_upper'] - x['BTC_lower'], axis=1)
# data['BTCbb_l'] = data.apply(lambda x: (x['BTC_upper'] - x['BTC_Close']) / x['BTCbb_sq'], axis=1)
# USDT ----------------------------------------------------------------------------------------------------------------
# data['USDT_ema3'] = data['USDT_Close'].rolling(3).mean()
# data['USDT_ema6'] = data['USDT_Close'].rolling(6).mean()
# data['USDT_ema9'] = data['USDT_Close'].rolling(9).mean()
# data['USDT_ema13'] = data['USDT_Close'].rolling(13).mean()
# data['USDT_ema20'] = data['USDT_Close'].rolling(20).mean()
#
# data['USDT_adx'] = adx(data['USDT_High'], data['USDT_Low'], data['USDT_Close'], window=14, fillna=False)
# data['USDT_macd'] = macd_diff(data['USDT_Close'], window_slow=26, window_fast=12, window_sign=9, fillna=False)
# data['USDT_%K'] = stoch(data['USDT_High'], data['USDT_Low'], data['USDT_Close'],
#                         window=14, smooth_window=3, fillna=False)
# data['USDT_%D'] = data['USDT_%K'].rolling(3).mean()
# data['USDT_%DS'] = data['USDT_%D'].rolling(3).mean()
# data['USDT_rsi'] = rsi(data['USDT_Close'], window=14, fillna=False)
# data['USDT_atr'] = average_true_range(data['USDT_High'], data['USDT_Low'], data['USDT_Close'], window=14, fillna=False)
data['USDT_diff'] = np.log(data['USDT_Close']).diff()
# data['USDT_cusum'] = data['USDT_Close'].cumsum()
data['USDT_srl_corr'] = df_rolling_autocorr(returns(data['USDT_Close']), window=window).rename('USDT_srl_corr')
# data['USDT_roc10'] = ROC(data['USDT_Close'], 10)
# data['USDT_roc20'] = ROC(data['USDT_Close'], 20)
# data['USDT_roc30'] = ROC(data['USDT_Close'], 30)
# data['USDT_mom10'] = MOM(data['USDT_Close'], 10)
# data['USDT_mom20'] = MOM(data['USDT_Close'], 20)
# data['USDT_mom30'] = MOM(data['USDT_Close'], 30)
data['USDT_price'], data['USDT_ave'], data['USDT_upper'], data['USDT_lower'] =\
    bbands(data['USDT_Close'], window=window, numsd=bb_stddev)
#
# data['USDTH4_ema3'] = data['USDT4H_Close'].rolling(3).mean()
# data['USDTH4_ema6'] = data['USDT4H_Close'].rolling(6).mean()
data['USDT4H%K'] = stoch(data['USDT4H_High'], data['USDT4H_Low'], data['USDT4H_Close'],
                         window=14, smooth_window=3, fillna=False)
data['USDT4H%D'] = data['USDT4H%K'].rolling(3).mean()
# data['USDT4H%DS'] = data['USDT4H%D'].rolling(3).mean()
# data['USDT4Hmacd'] = macd_diff(data['USDT4H_Close'], window_slow=26, window_fast=12, window_sign=9, fillna=False)
# data['USDT4H_rsi'] = rsi(data['USDT4H_Close'], window=14, fillna=False)
# data['USDT4H_atr'] = average_true_range(data['USDT4H_High'], data['USDT4H_Low'], data['USDT4H_Close'],
#                                        window=14, fillna=False)
#
data['USDTDema3'] = data['USDT1D_Close'].rolling(3).mean()
# data['USDTDema6'] = data['USDT1D_Close'].rolling(6).mean()
# data['USDTDema9'] = data['USDT1D_Close'].rolling(9).mean()
# data['USDTDema13'] = data['USDT1D_Close'].rolling(13).mean()
# data['USDTDema20'] = data['USDT1D_Close'].rolling(20).mean()
#
data['USDTTrD3'] = data.apply(lambda x: x['USDT_Close'] - x['USDTDema3'], axis=1)
# data['USDTTrD6'] = data.apply(lambda x: x['USDT_Close'] - x['USDTDema6'], axis=1)
# data['USDTTrD9'] = data.apply(lambda x: x['USDT_Close'] - x['USDTDema9'], axis=1)
# data['USDTTrD13'] = data.apply(lambda x: x['USDT_Close'] - x['USDTDema13'], axis=1)
#
# data['USDTStD4'] = data.apply(lambda x: x['USDT4H%K'] - x['USDT4H%D'], axis=1)
# data['USDTStD'] = data.apply(lambda x: x['USDT_%K'] - x['USDT_%D'], axis=1)
data['USDTbb_sq'] = data.apply(lambda x: x['USDT_upper'] - x['USDT_lower'], axis=1)
# data['USDTbb_l'] = data.apply(lambda x: (x['USDT_upper'] - x['USDT_Close']) / x['USDTbb_sq'], axis=1)